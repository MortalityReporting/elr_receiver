package edu.gatech.i3l.hl7.v2.elr_receiver;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Map;
import java.util.Properties;

import org.apache.log4j.Logger;

import ca.uhn.hl7v2.DefaultHapiContext;
import ca.uhn.hl7v2.HL7Exception;
import ca.uhn.hl7v2.HapiContext;
import ca.uhn.hl7v2.app.Connection;
import ca.uhn.hl7v2.app.ConnectionListener;
import ca.uhn.hl7v2.app.HL7Service;
import ca.uhn.hl7v2.model.Message;
import ca.uhn.hl7v2.protocol.ReceivingApplication;
import ca.uhn.hl7v2.protocol.ReceivingApplicationExceptionHandler;

/**
 * HL7v2 Receiver
 *   This application will listen to ELR sent from laboratory.
 *   The ELR should be mapped to ECR and sent to PHCR controller using /ECR Post API.
 *
 * version: 0.0.1
 * last updated: 7/21/2017
 * 
 * License:
 */
public class ELRReceiver 
{
	// Logger setup
	final static Logger LOGGER = Logger.getLogger(ELRReceiver.class.getName());
	

	static String default_port = "8888";
	static String default_phcr_controller_api_url = "http://localhost:8888/ECR";
	static boolean default_useTls = false;
	static String default_useTls_str = "False";
	static String default_qFileName = "queueECR";
	static String default_ecrTemplateFileName = "ECR.json";
	
	public static void main( String[] args ) throws Exception
	{
		Properties prop = new Properties();
		OutputStream output = null;
		InputStream input = null;
		Integer port = Integer.parseInt(default_port);
		boolean useTls = default_useTls;
		String phcr_controller_api_url = default_phcr_controller_api_url;
		String qFileName = default_qFileName;
		String ecrTemplateFileName = default_ecrTemplateFileName;
		
		boolean writeConfig = false;
		try {
			input = new FileInputStream("config.properties");
			prop.load(input);
			
			port = Integer.parseInt(prop.getProperty("port", default_port));
			phcr_controller_api_url = prop.getProperty("phcrControllerUrl", default_phcr_controller_api_url);
			qFileName = prop.getProperty("qFileName", default_qFileName);
			ecrTemplateFileName = prop.getProperty("ecrFileName", default_ecrTemplateFileName);
			
			if (prop.getProperty("useTls", default_useTls_str).equalsIgnoreCase("true")) {
				useTls = true;
			} else {
				useTls = false;
			}
		} catch (Exception e) {
			writeConfig = true;
			e.printStackTrace();
		} finally {
			if (writeConfig) {
				output = new FileOutputStream("config.properties");
				prop.setProperty("port", default_port);
				prop.setProperty("phcrControllerUrl", default_phcr_controller_api_url);
				prop.setProperty("useTls", default_useTls_str);
				prop.setProperty("qFileName", default_qFileName);
				prop.setProperty("ecrFileName", default_ecrTemplateFileName);
				prop.store(output, null);
			}
		}
		
		HapiContext ctx = new DefaultHapiContext();
		HL7Service server = ctx.newServer(port, useTls);
		
		HL7v2ReceiverApplication handler = new HL7v2ReceiverApplication();		
		server.registerApplication("*", "*", (ReceivingApplication<Message>) handler);
		server.registerConnectionListener(new MyConnectionListener());
		server.setExceptionHandler(new MyExceptionHandler());

		// Configure the Receiver App before we start.
		handler.config(phcr_controller_api_url, useTls, qFileName, ecrTemplateFileName);

		server.startAndWait();
	}
	
	public static class MyConnectionListener implements ConnectionListener {

		public void connectionDiscarded(Connection theC) {
			// TODO Auto-generated method stub
			System.out.println("Lost connection from: " + theC.getRemoteAddress().toString());
		}

		public void connectionReceived(Connection theC) {
			// TODO Auto-generated method stub
			System.out.println("New connection received: " + theC.getRemoteAddress().toString());
		}
		
	}
	
	/**
	 * Process an exception.
	 * 
	 * @param theIncomingMessage
	 *            the incoming message. This is the raw message which was
	 *            received from the external system
	 * @param theIncomingMetadata
	 *            Any metadata that accompanies the incoming message. See {@link ca.uhn.hl7v2.protocol.Transportable#getMetadata()}
	 * @param theOutgoingMessage
	 *            the outgoing message. The response NAK message generated by
	 *            HAPI.
	 * @param theE
	 *            the exception which was received
	 * @return The new outgoing message. This can be set to the value provided
	 *         by HAPI in <code>outgoingMessage</code>, or may be replaced with
	 *         another message. <b>This method may not return <code>null</code></b>.
	 */
	public static class MyExceptionHandler implements ReceivingApplicationExceptionHandler {

		public String processException(String theIncomingMessage, Map<String, Object> theIncomingMetadata, String theOutgoingMessage, Exception theE)
				throws HL7Exception {
			LOGGER.error("processException(incoming):\n" + theIncomingMessage +"\n\n");
			LOGGER.error("processException(outgoing):\n" + theOutgoingMessage +"\n\n");
			LOGGER.error("Exception:", theE);
			return theOutgoingMessage;
		}
		
	}
	
}
